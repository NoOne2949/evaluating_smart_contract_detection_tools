import csv

vulnerability_file = "smartbugs-results/metadata/vulnerabilities_mapping_rev2.csv"


def get_mapping():
    with open(vulnerability_file, 'r', newline='') as file:
        reader = csv.reader(file)
        headers = next(reader)
        mapping = list(reader)
        return mapping, headers


def strip_vulnerability(vulnerability_string):
    vulnerabilities = []
    if vulnerability_string:
        for part in vulnerability_string.split(';'):
            if ': ' in part:
                vulnerability_line, vulnerability_name = part.split(': ')
                vulnerabilities.append((vulnerability_line.strip().lower(), vulnerability_name.strip().lower()))
    return vulnerabilities


def get_mapped_vulnerabilities(tool, row_vulnerabilities):
    mapping, headers = get_mapping()
    vulnerabilities = []

    if row_vulnerabilities == "FP" or row_vulnerabilities == "Error/Fail":
        return vulnerabilities

    row_vulnerabilities = strip_vulnerability(row_vulnerabilities)

    for vulnerability in row_vulnerabilities:
        for row in mapping:
            if row[0] == tool and row[1].lower() == vulnerability[1].lower():
                true_found = False
                for index, value in enumerate(row):
                    if value.strip().upper() == "TRUE":
                        true_found = True
                        if headers[index] == "Other" or headers[index] == "Ignore":
                            # print(f"{tool}:{vulnerability} discarded: has {headers[index]} class")
                            break
                        else:
                            vulnerabilities.append((vulnerability[0], headers[index]))
                            break
                if not true_found:
                    print(f"{tool}:{vulnerability} discarded: vulnerability not tagged")
                    pass

    return vulnerabilities
