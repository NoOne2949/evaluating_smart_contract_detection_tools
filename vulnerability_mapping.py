import csv
import json
import os

vulnerability_file = "smartbugs-results/metadata/vulnerabilities_mapping.csv"
vulnerability_log = "vulnerabilities_log.csv"


def write_log(vulnerability_details, tool, file_name):
    if vulnerability_details:
        if vulnerability_details == "Error/Fail" or vulnerability_details == "FP":
            vulnerability_summary = vulnerability_details
        else:
            vulnerability_summary = '; '.join(vulnerability_details)
        with open(vulnerability_log, 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([tool, file_name, vulnerability_summary])


def vulnerability_exists(vulnerability_name):
    with open(vulnerability_file, 'r', newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            if vulnerability_name in row:
                return True
    return False


def process_vulnerabilities(tool, file_name, vulnerabilities):
    vulnerability_details = []

    for vulnerability in vulnerabilities:
        if type(vulnerability) is dict and vulnerability.get("name"):
            vulnerability_name = vulnerability.get("name")
            vulnerability_line = vulnerability.get("line")
            vulnerability_line_end = vulnerability.get("line_end")

            if vulnerability_name == 'secure':
                vulnerability_details.append("")

            if vulnerability_line_end:
                vulnerability_details.append(f"{vulnerability_line}-{vulnerability_line_end}: {vulnerability_name}")
            else:
                vulnerability_details.append(f"{vulnerability_line}: {vulnerability_name}")
            if not vulnerability_exists(vulnerability_name):
                print(f"added a new vulnerability: {vulnerability_name}")
                with open(vulnerability_file, 'a', newline='') as file:
                    writer = csv.writer(file)
                    writer.writerow([tool, vulnerability_name])

    write_log(vulnerability_details, tool, file_name)


def parser(tool, address, json_content):
    error_list = json_content.get("errors", [])
    fails_list = json_content.get("fails", [])
    findings_list = json_content.get("findings", [])

    if error_list or fails_list:
        write_log("Error/Fail", tool, address)
    if findings_list:
        process_vulnerabilities(tool, address, findings_list)
    elif not error_list and not fails_list and not findings_list:
        write_log("FP", tool, address)


def process_json_files(directory):
    if not os.path.exists(vulnerability_log):
        with open(vulnerability_log, 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Tool", "File name", "Findings"])

    for dir_name in os.listdir(directory):
        tool = dir_name.lower()
        print(f'\nSTARTED {tool.upper()} RESULT PARSING')
        for root, _, files in os.walk(os.path.join(directory, tool)):
            for file in files:
                if file == "result.json":
                    file_path = os.path.join(root, file)
                    file_name = os.path.basename(root)
                    while '.' in file_name:
                        file_name = os.path.splitext(file_name)[0]

                    with open(file_path, 'r') as json_file:
                        json_content = json.load(json_file)
                        print(f"Processing file: {file_name}")
                        parser(tool, file_name, json_content)
