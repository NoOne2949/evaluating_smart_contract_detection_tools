import csv
import os

artifacts_file = "csvs/AggregatedArtifacts.csv"
vulnerability_file = "smartbugs-results/metadata/vulnerabilities_mapping.csv"
vulnerability_log = "vulnerabilities_log.csv"


def parse_vulnerabilities(vulnerability_string):
    vulnerabilities = []
    if vulnerability_string:
        for part in vulnerability_string.split(';'):
            if ': ' in part:
                vulnerability_line, vulnerability_name = part.split(': ')
                vulnerabilities.append((vulnerability_line.strip().lower(), vulnerability_name.strip().lower()))
    return vulnerabilities


def confronts_artifacts(artifact, contract_address, log_vulnerabilities):
    for row in artifact:
        address = row['address']
        if address == contract_address:
            artifact_vulnerabilities = parse_vulnerabilities(row['labeling'])
            common_vulnerabilities, artifact_only, log_only = compare_vulnerabilities(artifact_vulnerabilities,
                                                                                      log_vulnerabilities)

            print(f"artifacts vulnerabilities: {row['labeling']}")
            print(f"log vulnerabilities: {log_vulnerabilities}")
            print("Comparison Results:")
            print("Common Vulnerabilities:", common_vulnerabilities)
            print("Artifacts Only:", artifact_only)
            print("Log Only:", log_only)
            print("\n")
    return None


def compare_vulnerabilities(artifact_vulnerabilities, log_vulnerabilities):
    artifact_set = set(artifact_vulnerabilities)
    log_set = set(log_vulnerabilities)

    common_vulnerabilities = artifact_set.intersection(log_set)
    artifact_only = artifact_set - log_set
    log_only = log_set - artifact_set

    return common_vulnerabilities, artifact_only, log_only


def filter_vulnerabilities(mapping, headers, tool, row_vulnerabilities):
    vulnerabilities = []
    row_vulnerabilities = parse_vulnerabilities(row_vulnerabilities)

    for vulnerability in row_vulnerabilities:
        for row in mapping:
            if row[0] == tool and row[1] == vulnerability[1]:
                true_found = False
                for index, value in enumerate(row):
                    if value.strip().upper() == "TRUE":
                        true_found = True
                        if headers[index] == "Other" or headers[index] == "Ignore":
                            print(f"{tool}:{vulnerability} discarded: has {headers[index]} class")
                        else:
                            vulnerabilities.append(vulnerability)
                if not true_found:
                    print(f"{tool}:{vulnerability} discarded: vulnerability not tagged")
    return vulnerabilities


def extract_row_from_logs(artifacts):
    with open(vulnerability_file, 'r', newline='') as file:
        reader = csv.reader(file)
        headers = next(reader)
        mapping = list(reader)

    with open(vulnerability_log, 'r', newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            vulnerabilities = filter_vulnerabilities(mapping, headers, row[0], row[2])
            confronts_artifacts(artifacts, row[1], vulnerabilities)
    return None


def confront_vulnerability():
    with open(artifacts_file, 'r', newline='') as infile:
        reader = csv.DictReader(infile)
        artifacts = list(reader)

    if artifacts:
        extract_row_from_logs(artifacts)
