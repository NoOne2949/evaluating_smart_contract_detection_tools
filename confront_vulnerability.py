import csv
import os

artifacts_file = "csvs/smartbugs_curated_revised.csv"
vulnerability_file = "smartbugs-results/metadata/vulnerabilities_mapping_rev2.csv"
vulnerability_log = "vulnerabilities_log.csv"


def calculate_metrics(len_artifact_vuln, len_only_artifact_vuln, len_log_vuln, len_only_log_vuln, len_common_vuln):
    print(f"Right vulnerability found: {len_common_vuln}/{len_artifact_vuln}")
    print(f"Right vulnerability not found: {len_only_artifact_vuln}/{len_artifact_vuln}")
    print(f"Extra vulnerability found: {len_only_log_vuln}\n")

    return None


def confronts_artifacts(artifact, contract_address, log_vulnerabilities):
    for row in artifact:
        address = row['name'].replace('.sol', '')
        if address == contract_address:
            artifact_vulnerabilities = parse_vulnerabilities(row['Tag'])
            artifact_vulnerabilities = set(
                (line, parse_artifact_vulnerability(vul)) for line, vul in artifact_vulnerabilities)
            log_vulnerabilities = set(log_vulnerabilities)

            common_vulnerabilities, artifact_only, log_only, metrics = compare_vulnerabilities(artifact_vulnerabilities,
                                                                                               log_vulnerabilities)
            # print(f"artifacts vulnerabilities: {row['Tag']}")
            # print(f"log vulnerabilities: {log_vulnerabilities}")
            print(f"{contract_address} comparison results:")
            # print("Common Vulnerabilities:", common_vulnerabilities)
            # print("Artifacts Only:", artifact_only)
            # print("Log Only:", log_only)
            # print("\n")
            calculate_metrics(len(artifact_vulnerabilities), len(artifact_only), len(log_vulnerabilities),
                              len(log_only), len(common_vulnerabilities))
            right_vulnerability_found = [len(common_vulnerabilities), len(artifact_vulnerabilities)]
            return metrics, right_vulnerability_found
    # in case artifact file is empty
    return [0, 0, 0, 0]


def compare_vulnerabilities(artifact_vulnerabilities, log_vulnerabilities):
    common_vulnerabilities = []
    log_only = []
    artifact_only = artifact_vulnerabilities.copy()

    metrics = [0, 0, 0, 0]  # FP, FN, TP, TN
    if len(artifact_vulnerabilities) == 0 and len(log_vulnerabilities) == 0:
        metrics[3] += 1
    if len(log_vulnerabilities) == 0 and len(artifact_vulnerabilities) > 0:
        metrics[1] += 1

    for line, vul in log_vulnerabilities:
        found = False
        for artifact_line, artifact_set_vul in artifact_vulnerabilities:
            if vul == artifact_set_vul:
                if "-" in line:
                    start, end = map(int, line.split('-'))
                    if start <= int(artifact_line) <= end:
                        common_vulnerabilities.append((artifact_line, vul))
                        artifact_only.discard((str(artifact_line), artifact_set_vul))
                        found = True
                        metrics[2] += 1
                    else:
                        continue
                elif artifact_line == line:
                    common_vulnerabilities.append((artifact_line, vul))
                    artifact_only.discard((str(artifact_line), artifact_set_vul))
                    found = True
                    metrics[2] += 1
        if not found:
            log_only.append((line, vul))
            metrics[0] += 1

    return common_vulnerabilities, artifact_only, log_only, metrics


def parse_artifact_vulnerability(vulnerability):
    if "arithmetic" in vulnerability:
        return "arithmetic"
    elif "unchecked" in vulnerability:
        return "unchecked_low_calls"
    elif "reentrancy" in vulnerability:
        return "reentrancy"
    elif "short" in vulnerability:
        return "short_addresses"
    elif "access" in vulnerability:
        return "access_control"
    elif "time manipulation" in vulnerability:
        return "time_manipulation"
    elif "random" in vulnerability:
        return "bad_randomness"
    elif "front" in vulnerability:
        return "front_running"
    elif "dos" in vulnerability or "denial" in vulnerability:
        return "denial_service"
    else:
        return vulnerability


def parse_vulnerabilities(vulnerability_string):
    vulnerabilities = []
    if vulnerability_string:
        for part in vulnerability_string.split(';'):
            if ': ' in part:
                vulnerability_line, vulnerability_name = part.split(': ')
                vulnerabilities.append((vulnerability_line.strip().lower(), vulnerability_name.strip().lower()))
    return vulnerabilities


def filter_vulnerabilities(mapping, headers, tool, row_vulnerabilities):
    vulnerabilities = []
    row_vulnerabilities = parse_vulnerabilities(row_vulnerabilities)

    for vulnerability in row_vulnerabilities:
        for row in mapping:
            if row[0] == tool and row[1] == vulnerability[1]:
                true_found = False
                for index, value in enumerate(row):
                    if value.strip().upper() == "TRUE":
                        true_found = True
                        if headers[index] == "Other" or headers[index] == "Ignore":
                            # print(f"{tool}:{vulnerability} discarded: has {headers[index]} class")
                            break
                        else:
                            vulnerabilities.append((vulnerability[0], headers[index]))
                            break
                if not true_found:
                    print(f"{tool}:{vulnerability} discarded: vulnerability not tagged")
                    pass

    return vulnerabilities


def extract_row_from_logs(artifacts):
    metrics = {
        'false_positive': 0,
        'false_negative': 0,
        'true_positive': 0,
        'true_negative': 0
    }
    right_vulnerability_found = {
        'found': 0,
        'total': 0
    }

    with open(vulnerability_file, 'r', newline='') as file:
        reader = csv.reader(file)
        headers = next(reader)
        mapping = list(reader)

    with open(vulnerability_log, 'r', newline='') as file:
        reader = csv.reader(file)
        sorted_rows = sorted(reader, key=lambda row: row[0])
        for row in sorted_rows:
            if row[0] == "slither":
                if row[2] == "Error/Fail":
                    continue
                elif row[2] == "FP":
                    # logica vero negativo
                    continue
                else:
                    vulnerabilities = filter_vulnerabilities(mapping, headers, row[0], row[2])
                    metrics_obtained, vuln_found = confronts_artifacts(artifacts, row[1], vulnerabilities)
                    metrics['false_positive'] += metrics_obtained[0]
                    metrics['false_negative'] += metrics_obtained[1]
                    metrics['true_positive'] += metrics_obtained[2]
                    metrics['true_negative'] += metrics_obtained[3]
                    right_vulnerability_found['found'] += vuln_found[0]
                    right_vulnerability_found['total'] += vuln_found[1]

    calculate_final_metrics(metrics['true_positive'], metrics['true_negative'], metrics['false_negative'],
                            metrics['false_positive'], right_vulnerability_found)
    return None


def calculate_final_metrics(true_positives, true_negatives, false_negatives, false_positives, vulnerabilities_found):
    accuracy = (true_positives + true_negatives) / (true_positives + true_negatives + false_negatives + false_positives)

    precision = true_positives / (true_positives + false_positives)

    recall = true_positives / (true_positives + false_negatives)

    f1_score = 2 * (precision * recall) / (precision + recall)
    print(f"\nTotal Metrics:\nTotal vulnerabilities found: {vulnerabilities_found['found']}/{vulnerabilities_found['total']}"
          f"\nTrue positives: {true_positives}\nTrue negatives: {true_negatives}"
          f"\nFalse positives: {false_negatives}\nFalse negatives: {false_positives}")
    print(f'Accuracy: {accuracy}')
    print(f'Precision: {precision}')
    print(f'Recall: {recall}')
    print(f'F1 Score: {f1_score}')


def confront_vulnerability():
    if not os.path.exists(vulnerability_log):
        print("Vulnerability log not found")
        return

    with open(artifacts_file, 'r', newline='') as infile:
        reader = csv.DictReader(infile)
        artifacts = list(reader)

    if artifacts:
        extract_row_from_logs(artifacts)
