import csv
import os

from calculate_metrics import MetricsCalculator
from parse_vulnerability import get_mapped_vulnerabilities, strip_vulnerability

artifacts_file = "csvs/smartbugs_curated_revised.csv"
vulnerability_log = "vulnerabilities_log.csv"


def confronts_artifacts(artifact, contract_address, log_vulnerabilities):
    for row in artifact:
        address = row['name'].replace('.sol', '')
        if address == contract_address:
            artifact_vulnerabilities = strip_vulnerability(row['Tag'])
            artifact_vulnerabilities = set(
                (line, parse_artifact_vulnerability(vul)) for line, vul in artifact_vulnerabilities)
            log_vulnerabilities = set(log_vulnerabilities)

            print(f"\n{contract_address} comparison results:")
            n_common_vulnerabilities, metrics, single_vuln_metrics = compare_vulnerabilities(artifact_vulnerabilities,
                                                                                             log_vulnerabilities)

            return metrics, single_vuln_metrics, n_common_vulnerabilities

    # in case artifact file is empty
    # lanciare eccezione
    return None


def compare_vulnerabilities(artifact_vulnerabilities, log_vulnerabilities):
    metrics = {
        'true_negative': 0,
        'true_positive': 0,
        'false_negative': 0,
        'false_positive': 0,
    }
    single_vuln_metrics = {
        'access_control': 0,
        'arithmetic': 0,
        'denial_service': 0,
        'reentrancy': 0,
        'unchecked_low_calls': 0,
        'bad_randomness': 0,
        'front_running': 0,
        'time_manipulation': 0,
        'short_addresses': 0
    }

    common_vulnerabilities = []
    log_only = []
    artifact_only = artifact_vulnerabilities.copy()

    if len(artifact_vulnerabilities) == 0 and len(log_vulnerabilities) == 0:
        metrics['true_negative'] += 1
        print("TRUE NEGATIVE FOUND")
        return len(common_vulnerabilities), metrics, single_vuln_metrics
    if len(log_vulnerabilities) == 0 and len(artifact_vulnerabilities) > 0:
        metrics['false_negative'] += 1
        print("FALSE NEGATIVE FOUND")
        return len(common_vulnerabilities), metrics, single_vuln_metrics

    for line, vul in log_vulnerabilities:
        found = False
        for artifact_line, artifact_set_vul in artifact_vulnerabilities:
            if vul == artifact_set_vul:
                if "-" in line:
                    start, end = map(int, line.split('-'))
                    if start <= int(artifact_line) <= end:
                        common_vulnerabilities.append((artifact_line, vul))
                        artifact_only.discard((str(artifact_line), artifact_set_vul))
                        found = True
                        metrics['true_positive'] += 1
                        single_vuln_metrics[vul] += 1
                    else:
                        continue
                elif artifact_line == line:
                    common_vulnerabilities.append((artifact_line, vul))
                    artifact_only.discard((str(artifact_line), artifact_set_vul))
                    found = True
                    metrics['true_positive'] += 1
                    single_vuln_metrics[vul] += 1
        if not found:
            log_only.append((line, vul))
            metrics['false_positive'] += 1

    print(f"Right vulnerability found: {len(common_vulnerabilities)}/{len(artifact_vulnerabilities)}")
    print(f"Right vulnerability not found: {len(artifact_only)}/{len(artifact_vulnerabilities)}")
    print(f"Extra vulnerability found: {len(log_only)}")
    return len(common_vulnerabilities), metrics, single_vuln_metrics


def parse_artifact_vulnerability(vulnerability):
    if "arithmetic" in vulnerability:
        return "arithmetic"
    elif "unchecked" in vulnerability:
        return "unchecked_low_calls"
    elif "reentrancy" in vulnerability:
        return "reentrancy"
    elif "short" in vulnerability:
        return "short_addresses"
    elif "access" in vulnerability:
        return "access_control"
    elif "time manipulation" in vulnerability:
        return "time_manipulation"
    elif "random" in vulnerability:
        return "bad_randomness"
    elif "front" in vulnerability:
        return "front_running"
    elif "dos" in vulnerability or "denial" in vulnerability:
        return "denial_service"
    else:
        return vulnerability


def extract_row_from_logs(artifacts):
    tool_metrics = dict()

    with open(vulnerability_log, 'r', newline='') as file:
        reader = csv.reader(file)
        sorted_rows = sorted(reader, key=lambda row: row[0])
        for row in sorted_rows[1:]:
            tool_name = row[0]

            if not (tool_name in tool_metrics.keys()):
                print(f"\n{tool_name} started")
                tool_metrics[tool_name] = MetricsCalculator()

            if row[2] == "Error/Fail":
                continue
            else:
                vulnerabilities = get_mapped_vulnerabilities(tool_name, row[2])
                metrics_obtained, single_vuln_metrics, vuln_found = confronts_artifacts(artifacts, row[1],
                                                                                        vulnerabilities)
                tool_metrics[tool_name].update_metrics(metrics_obtained, single_vuln_metrics, vuln_found)

    for key in tool_metrics.keys():
        try:
            tool_metrics[key].calculate_metrics()
            tool_metrics[key].total_vulnerabilities_counter(artifacts)
            tool_metrics[key].stamp_metrics(key)
        except Exception as e:
            print(f"\n{key}: {e}")
    return None


def confront_vulnerability():
    if not os.path.exists(vulnerability_log):
        print("Vulnerability log not found")
        return

    with open(artifacts_file, 'r', newline='') as infile:
        reader = csv.DictReader(infile)
        artifacts = list(reader)

    if artifacts:
        extract_row_from_logs(artifacts)
