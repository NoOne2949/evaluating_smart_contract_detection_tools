import csv
import os
import re
import pandas as pd

from calculate_metrics import MetricsCalculator, total_vulnerabilities_counter
from parse_vulnerability import strip_vulnerability


def confronts_artifacts(artifact, contract_address, log_vulnerabilities):
    for row in artifact:
        address = row['contract'].replace('.sol', '')

        if address == contract_address:
            artifact_vulnerabilities = strip_vulnerability(row['tag'])
            artifact_vulnerabilities = set(log for log in artifact_vulnerabilities)
            log_vulnerabilities = set(log_vulnerabilities)

            # print(f"\n{contract_address} comparison results:")

            if len(artifact_vulnerabilities) == 0 and len(log_vulnerabilities) == 0:
                # print("TRUE NEGATIVE FOUND")
                return {'true_negative': 1}, {}, 0
            elif len(log_vulnerabilities) == 0 and len(artifact_vulnerabilities) > 0:
                # print("FALSE NEGATIVE FOUND")
                return {'false_negative': 1}, {}, 0
            else:
                metrics, single_vuln_metrics = compare_vulnerabilities(artifact_vulnerabilities, log_vulnerabilities)
                return metrics, single_vuln_metrics, metrics['true_positive']
    # if artifact file is empty
    exit('Artifact file is empty')


def check_vuln(df_log_row, df_artifact):
    if re.match(r'^\d+-\d+', df_log_row['vuln_line']):
        start, end = map(int, df_log_row['vuln_line'].split('-'))
        condition = (df_artifact['vuln'] == df_log_row['vuln']) & (df_artifact['vuln_line'].astype(int).between(start, end))
    elif df_log_row['vuln_line'] == 'none':
        condition = (df_artifact['vuln'] == df_log_row['vuln'])
    else:
        condition = (df_artifact['vuln'] == df_log_row['vuln']) & (df_artifact['vuln_line'] == df_log_row['vuln_line'])
    return df_artifact[condition].shape[0] > 0


def compare_vulnerabilities(artifact_vulnerabilities, log_vulnerabilities):
    df_log = pd.DataFrame(log_vulnerabilities, columns=['vuln_line', 'vuln'])
    df_artifact = pd.DataFrame(artifact_vulnerabilities, columns=['vuln_line', 'vuln'])
    df_log['match'] = df_log.apply(check_vuln, df_artifact=df_artifact, axis=1)

    total_artifact_vulns = len(artifact_vulnerabilities)
    metrics = {
        'true_positive': df_log['match'].sum(),
        'false_positive': (~df_log['match']).sum(),
        'false_negative': total_artifact_vulns - df_log['match'].sum()
    }
    single_vuln_metrics = df_log[df_log['match']].groupby('vuln').size().to_dict()
    return metrics, single_vuln_metrics


def extract_row_from_logs(artifacts, vulnerability_log):
    tool_metrics = dict()

    with open(vulnerability_log, 'r', newline='') as file:
        reader = csv.reader(file)
        sorted_rows = sorted(reader, key=lambda row: row[0])
        for row in sorted_rows[1:]:
            tool_name = row[0]

            if not (tool_name in tool_metrics.keys()):
                # print(f"\n{tool_name} started")
                tool_metrics[tool_name] = MetricsCalculator()

            if row[2] == "Error/Fail":
                continue
            else:
                vulnerabilities = strip_vulnerability(row[3])
                metrics_obtained, single_vuln_metrics, vuln_found = confronts_artifacts(artifacts, row[1],
                                                                                        vulnerabilities)
                tool_metrics[tool_name].update_metrics(metrics_obtained, single_vuln_metrics, vuln_found)

    total_vulnerabilities_counter(artifacts)
    for key in tool_metrics.keys():
        try:
            tool_metrics[key].calculate_metrics()
            tool_metrics[key].stamp_metrics(key)
        except Exception as e:
            print(f"\n{key}: {e}")
    return None


def confront_vulnerability(artifacts_file, vulnerability_log):
    if not os.path.exists(vulnerability_log):
        print("Vulnerability log not found")
        return

    with open(artifacts_file, 'r', newline='') as infile:
        reader = csv.DictReader(infile)
        artifacts = list(reader)

    if artifacts:
        extract_row_from_logs(artifacts, vulnerability_log)
