import csv
import os

artifacts_file = "csvs/ZEUS_manually_tagged_unsafe_contracts_first_revise.csv"
vulnerability_file = "smartbugs-results/metadata/vulnerabilities_mapping_rev1.csv"
vulnerability_log = "vulnerabilities_log.csv"


def confronts_artifacts(artifact, contract_address, log_vulnerabilities):
    for row in artifact:
        address = row['Address']
        if address == contract_address:
            artifact_vulnerabilities = parse_vulnerabilities(row['Tag'])
            common_vulnerabilities, artifact_only, log_only = compare_vulnerabilities(artifact_vulnerabilities,
                                                                                      log_vulnerabilities)
            print(f"artifacts vulnerabilities: {row['Tag']}")
            print(f"log vulnerabilities: {log_vulnerabilities}")
            print(f"{contract_address} comparison results:")
            print("Common Vulnerabilities:", common_vulnerabilities)
            print("Artifacts Only:", artifact_only)
            print("Log Only:", log_only)
            print("\n")
    return None


def compare_vulnerabilities(artifact_vulnerabilities, log_vulnerabilities):
    common_vulnerabilities = []
    log_only = []
    artifact_set = set((line, parse_artifact_vulnerability(vul)) for line, vul in artifact_vulnerabilities)
    artifact_only = artifact_set.copy()

    for line, vul in log_vulnerabilities:
        found = False
        for artifact_line, artifact_set_vul in artifact_set:
            if vul == artifact_set_vul:
                if "-" in line:
                    start, end = map(int, line.split('-'))
                    if start <= int(artifact_line) <= end:
                        common_vulnerabilities.append((artifact_line, vul))
                        artifact_only.discard((str(artifact_line), artifact_set_vul))
                        found = True
                    else:
                        continue
                elif artifact_line == line:
                    common_vulnerabilities.append((artifact_line, vul))
                    artifact_only.discard((str(artifact_line), artifact_set_vul))
                    found = True
        if not found:
            log_only.append((line, vul))

    return common_vulnerabilities, artifact_only, log_only


def parse_artifact_vulnerability(vulnerability):
    if "arithmetic" in vulnerability:
        return "arithmetic"
    elif "unchecked" in vulnerability:
        return "unchecked_low_calls"
    elif "reentrancy" in vulnerability:
        return "reentrancy"
    elif "short" in vulnerability:
        return "short_addresses"
    elif "access" in vulnerability:
        return "access_control"
    elif "time manipulation" in vulnerability:
        return "time_manipulation"
    elif "random" in vulnerability:
        return "bad_randomness"
    elif "front" in vulnerability:
        return "front_running"
    elif "dos" in vulnerability or "denial" in vulnerability:
        return "denial_service"
    else:
        return vulnerability


def parse_vulnerabilities(vulnerability_string):
    vulnerabilities = []
    if vulnerability_string:
        for part in vulnerability_string.split(';'):
            if ': ' in part:
                vulnerability_line, vulnerability_name = part.split(': ')
                vulnerabilities.append((vulnerability_line.strip().lower(), vulnerability_name.strip().lower()))
    return vulnerabilities


def filter_vulnerabilities(mapping, headers, tool, row_vulnerabilities):
    vulnerabilities = []
    row_vulnerabilities = parse_vulnerabilities(row_vulnerabilities)

    for vulnerability in row_vulnerabilities:
        for row in mapping:
            if row[0] == tool and row[1] == vulnerability[1]:
                true_found = False
                for index, value in enumerate(row):
                    if value.strip().upper() == "TRUE":
                        true_found = True
                        if headers[index] == "Other" or headers[index] == "Ignore":
                            # print(f"{tool}:{vulnerability} discarded: has {headers[index]} class")
                            break
                        else:
                            vulnerabilities.append((vulnerability[0], headers[index]))
                            break
                if not true_found:
                    # print(f"{tool}:{vulnerability} discarded: vulnerability not tagged")
                    pass
                break
    return vulnerabilities


def extract_row_from_logs(artifacts):
    with open(vulnerability_file, 'r', newline='') as file:
        reader = csv.reader(file)
        headers = next(reader)
        mapping = list(reader)

    with open(vulnerability_log, 'r', newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == "slither":
                vulnerabilities = filter_vulnerabilities(mapping, headers, row[0], row[2])
                confronts_artifacts(artifacts, row[1], vulnerabilities)
    return None


def confront_vulnerability():
    if not os.path.exists(vulnerability_log):
        print("Vulnerability log not found")
        return

    with open(artifacts_file, 'r', newline='') as infile:
        reader = csv.DictReader(infile)
        artifacts = list(reader)

    if artifacts:
        extract_row_from_logs(artifacts)
